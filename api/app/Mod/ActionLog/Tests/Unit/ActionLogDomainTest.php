<?php
namespace App\Mod\ActionLog\Tests\Unit;

use App\Mod\ActionLog\Domain\ActionLogService;
use App\Mod\ActionLog\Domain\Models\ActionLog;
use Symfony\Component\HttpFoundation\Request;
use Tests\Unit\AbstractUnitTest;

class ActionLogDomainTest extends AbstractUnitTest
{
    /** @var ActionLogService $service */
    protected $service;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->service = \app()->make(ActionLogService::class);
    }

    public function test_list()
    {
        // データ7件作成
        ActionLog::factory(7)->create();

        // 1ページ目テスト
        $request = new Request();
        $request->query->add([
            'current' => 1,
            'limit' => 5
        ]);
        $result = $this->service->findList($request);
        $this->assertEquals($result['total'], 7);
        $this->assertEquals(count($result['data']), 5);

        // 2ページ目テスト
        $request = new Request();
        $request->query->add([
            'current' => 2,
            'limit' => 5
        ]);
        $result = $this->service->findList($request);
        $this->assertEquals($result['total'], 7);
        $this->assertEquals(count($result['data']), 2);
    }

    public function test_detail()
    {
        // データ作成
        $createPost = ActionLog::factory()->create();
        // データ取得
        $getPost = $this->service->findDetail($createPost->id);
        // 同じデータかテスト
        $this->assertEquals($createPost->title, $getPost->title);
    }

    public function test_save()
    {
        // データ作成テスト
        $inputData = ActionLog::factory()->make()->toArray();
        $request = new Request();
        $request->request->add($inputData);
        $result = $this->service->save($request);
        $post = ActionLog::find($result->id);
        $this->assertEquals($inputData['title'], $post->title);

        // データ更新テスト
        $inputData['title'] .= ' edit';
        $request->request->add($inputData);
        $this->service->save($request, $result->id);
        $post = ActionLog::find($result->id);
        $this->assertEquals($inputData['title'], $post->title);
    }

    public function test_delete()
    {
        $createPost = ActionLog::factory()->create();
        $this->assertEquals(ActionLog::count(), 1);

        $this->service->delete($createPost->id);
        $this->assertEquals(ActionLog::count(), 0);
    }
}
