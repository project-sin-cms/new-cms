<?php
namespace App\Mod\Content\Domain;

use Symfony\Component\HttpFoundation\Request;
use App\Mod\Content\Domain\Models\Content;
use App\Mod\ContentModel\Domain\Models\ContentModel;
use Illuminate\Support\Facades\Log;

/**
 * @property Content $model
 * @property ContentModel $contentModel 
 */
class ContentService extends AbstractService
{
    public function __construct(Content $model)
    {
        parent::__construct($model);
    }

    public function findList(Request $request, ?int $limit = null, array $with = []): array
    {
        if (!$limit) {
            $limit = config('content.list.limit');
        }
        return parent::findList($request, $limit, $with); // TODO: Change the autogenerated stub
    }

    protected function beforeSave($request, $post, &$inputs): void
    {
        // Content Valueに保存するため、fieldの入力値は破棄
        foreach ($this->contentModel->fields as $key => $field) {
            unset($inputs[$field['field_id']]);
        }

        // categoriesも一旦破棄
        unset($inputs['categories']);

        parent::beforeSave($request, $post, $inputs);
    }

    protected function afterSave($request, Content $post): void
    {
        // Content Valueの保存
        foreach ($this->contentModel->fields as $key => $field) {
            $inputVal = $request->input($field['field_id']);
            $values = [
                'field_id' => $field->id,
                'value' => $inputVal
            ];
            $post->values()->updateOrCreate(
                ['field_id' => $values['field_id']],
                $values
            );
        }

        // カテゴリの保存処理
        $categoris = $request->input('categories', null);
        if ($categoris) {
            if (isset($categoris[0])) {
                // 複数選択の場合
                $categoryId = [];
                foreach ($categoris as $category) {
                    // 新規カテゴリ（label, value以外のプロパティがあればそれも含む）を検出し、存在しない場合はカテゴリを作成して紐付ける
                    $categoryId = [];
                    foreach ($categoris as $category) {
                        // valueが数値でなければ新規カテゴリとみなす
                        if (!is_numeric($category['value'])) {
                            // 新規カテゴリ作成
                            $newCategory = $post->categories()->getRelated()->create([
                                'title' => $category['label'],
                                'model_id' => $this->contentModel->id
                            ]);
                            $categoryId[] = $newCategory->id;
                        } else {
                            $categoryId[] = $category['value'];
                        }
                    }
                }
                $post->categories()->sync($categoryId);
            } else {
                // 単一選択の場合
                // valueが数値でなければ新規カテゴリとみなす
                if (!is_numeric($categoris['value'])) {
                    // 新規カテゴリ作成
                    Log::info($this->contentModel->id);
                    $newCategory = $post->categories()->getRelated()->create([
                        'title' => $categoris['label'],
                        'model_id' => $this->contentModel->id
                    ]);
                    $categoryId = [$newCategory->id];
                } else {
                    $categoryId = [$categoris['value']];
                }
                $post->categories()->sync($categoryId);
            }
            
        } else {
            // カテゴリ未選択の場合は関連を解除
            $post->categories()->detach();
        }
    }

    protected function validateRequest(Request $request, mixed $post = null): void
    {
        // contentModelのfieldsのうち、is_requiredがtrueのものを必須バリデーション
        $fields = $this->contentModel->fields ?? [];
        $rules = [];
        $message = [];
        foreach ($fields as $field) {
            if (!empty($field['is_required'])) {
                // field_idをキーに必須バリデーション
                $rules[$field['field_id']] = ['required'];
                $message["{$field['field_id']}.required"] = "{$field['name']}は必須項目です。";
            }
        }
        if (!empty($rules)) {
            $request->validate($rules, $message);
        }
    }
}
