<?php
namespace App\Mod\ContentField\Tests\Unit;

use App\Mod\ContentField\Domain\ContentFieldService;
use App\Mod\ContentField\Domain\Models\ContentField;
use App\Mod\ContentModel\Domain\Models\ContentModel;
use Illuminate\Http\Request;
use Illuminate\Validation\ValidationException;
use Tests\Unit\AbstractUnitTest;

class ContentFieldDomainTest extends AbstractUnitTest
{
    /** @var ContentFieldService $service */
    protected $service;
    private ContentModel $contentModel;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->service = app()->make(ContentFieldService::class);
        $this->contentModel = ContentModel::factory()->create();
    }

    public function test_list()
    {
        // データ7件作成
        ContentField::factory(7)->create(['model_id' => $this->contentModel->id]);

        // 1ページ目テスト
        $request = new Request();
        $request->query->add([
            'current' => 1,
            'limit' => 5
        ]);
        $result = $this->service->findList($request);
        $this->assertEquals($result['total'], 7);
        $this->assertEquals(count($result['data']), 5);

        // 2ページ目テスト
        $request = new Request();
        $request->query->add([
            'current' => 2,
            'limit' => 5
        ]);
        $result = $this->service->findList($request);
        $this->assertEquals($result['total'], 7);
        $this->assertEquals(count($result['data']), 2);
    }

    public function test_detail()
    {
        // データ作成
        $createPost = ContentField::factory()->create(['model_id' => $this->contentModel->id]);
        // データ取得
        $getPost = $this->service->findDetail(new Request(), $createPost->id);
        // 同じデータかテスト
        $this->assertEquals($createPost->name, $getPost->name);
    }

    public function test_save()
    {
        // データ作成テスト
        $inputData = ContentField::factory()->make(['model_id' => $this->contentModel->id])->toArray();
        $request = Request::create('/fake-uri', 'POST', $inputData);
        $result = $this->service->save($request);
        $post = ContentField::find($result->id);
        $this->assertEquals($inputData['name'], $post->name);

        // データ更新テスト
        $inputData['name'] .= ' edit';
        $updateRequest = Request::create('/fake-uri/' . $result->id, 'POST', $inputData);
        $this->service->save($updateRequest, $result->id);
        $post = ContentField::find($result->id);
        $this->assertEquals($inputData['name'], $post->name);
    }

    public function test_delete()
    {
        $createPost = ContentField::factory()->create(['model_id' => $this->contentModel->id]);
        $this->assertEquals(ContentField::count(), 1);

        $this->service->delete(new Request(), $createPost->id);
        $this->assertEquals(ContentField::count(), 0);
    }

    public function test_save_field_id_unique_validation()
    {
        // --- Create validation ---
        $existingField = ContentField::factory()->create(['model_id' => $this->contentModel->id]);
        $duplicateData = ContentField::factory()->make([
            'model_id' => $this->contentModel->id,
            'field_id' => $existingField->field_id
        ])->toArray();

        $request = Request::create('/fake-uri', 'POST', $duplicateData);

        try {
            $this->service->save($request);
            $this->fail('ValidationException was not thrown for create.');
        } catch (ValidationException $e) {
            $this->assertArrayHasKey('field_id', $e->errors());
        }

        // --- Update validation ---
        $fieldToUpdate = ContentField::factory()->create(['model_id' => $this->contentModel->id]);
        $updateData = $fieldToUpdate->toArray();
        $updateData['field_id'] = $existingField->field_id; // Set to a duplicate field_id

        $request = Request::create('/fake-uri', 'PUT', $updateData);

        try {
            $this->service->save($request, $fieldToUpdate->id);
            $this->fail('ValidationException was not thrown for update.');
        } catch (ValidationException $e) {
            $this->assertArrayHasKey('field_id', $e->errors());
        }
    }
}
